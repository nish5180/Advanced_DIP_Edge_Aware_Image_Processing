img = imread('peppers.png');     % Load a color image
gray_img = rgb2gray(img);  
lvl=5;
pyr = create_gaussian_pyramid(gray_img, lvl);
figure;

for i = 1:lvl
    subplot(1, lvl, i);
    imshow(pyr{i});
    title(sprintf('Level %d', i));
end





function R = lapfilter_core(I, r_func, nlev)
% Core Local Laplacian Filtering algorithm (simplified and modular)
% I      : full-resolution grayscale image (double, [0,1])
% r_func : remapping function handle @(patch, guide) â†’ remapped patch
% nlev   : number of pyramid levels

% Step 1: Gaussian pyramid of input
G = create_gaussian_pyramid(I, nlev);

% Step 2: Prepare empty Laplacian output pyramid
L_out = cell(nlev, 1);
for l = 1:nlev
    L_out{l} = zeros(size(G{l}));
end

% Step 3: Loop through all coefficients
for l = 1:nlev-1
    [rows, cols] = size(G{l});
    
    for y = 1:rows
        for x = 1:cols
            % 3.1 Get guide value
            g = G{l}(y, x);

            % 3.2 Get subregion and center from full-res image
            [R, center] = determine_subregion(I, l, x, y);

            % 3.3 Apply remapping
            R_remapped = remapping_function(R, g);  % user-defined remapping function

            % 3.4 Laplacian pyramid of remapped patch
            L_patch = construct_laplacian_pyramid(R_remapped, l);

            % 3.5 Extract single coefficient
            cx = center(2);
            cy = center(1);
            L_out{l}(y, x) = L_patch{l}(cy, cx);
        end
    end
end

% Step 4: Copy last Gaussian level as residual
L_out{nlev} = G{nlev};

% Step 5: Reconstruct final image
R = collapse_laplacian_pyramid(L_out);
end




